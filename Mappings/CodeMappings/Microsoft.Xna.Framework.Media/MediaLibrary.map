<MapUnit xmlns="clr-namespace:Mobilize.Mappers.Extensibility.Core;assembly=Mobilize.ExtensibleMappers"
         xmlns:map="clr-namespace:Mobilize.Mappers.Extensibility.Code;assembly=Mobilize.ExtensibleMappers">
  <MapUnit.Elements>
    <map:CodeMapPackage Type="Microsoft.Xna.Framework.Media.MediaLibrary">
      <map:CodeMapPackage.Maps>
        
       <map:CodeMap Kind="Type">
          <map:CodeMap.Action>
			       <map:ReplaceClassUsage NewNamespace="Windows.Storage" NewClassName="StorageFolder" />
		      </map:CodeMap.Action>
        </map:CodeMap>

        <map:CodeMap Kind="New">
          <map:CodeMap.Action>
            <map:ReplaceWithTemplate>
              Windows.Storage.KnownFolders.PicturesLibrary
            </map:ReplaceWithTemplate>
          </map:CodeMap.Action>
        </map:CodeMap>

        <map:CodeMap Kind="Call" MemberName="SavePicture">
          <map:CodeMap.Action>
            <map:Conditional>
              <map:Case>
                <map:Case.Condition>
                  <map:WithMethodCall>
                    <map:ArgumentCount>2</map:ArgumentCount>
                    <map:WithArgument Position="0">
                      <map:IsExpressionOfType>System.String</map:IsExpressionOfType>
                      <map:AssignName>$name</map:AssignName>
                    </map:WithArgument>
                    <map:WithArgument Position="1">
                      <map:IsExpressionOfType>System.IO.Stream</map:IsExpressionOfType>
                      <map:AssignName>$streamParam</map:AssignName>
                    </map:WithArgument>
                    <map:WithCalledMemberOwner>
                      <map:AssignName>$owner</map:AssignName>
                    </map:WithCalledMemberOwner>
                  </map:WithMethodCall>
                </map:Case.Condition>
                <map:Case.Action>
                  <map:ActionSequence>
                    <map:AddPreStatementFromTemplate>
                      <![CDATA[  
                      var file = await $owner.CreateFileAsync($name, Windows.Storage.CreationCollisionOption.GenerateUniqueName); 
                      ]]>
                    </map:AddPreStatementFromTemplate>
                    <map:AddPreStatementFromTemplate>
                      <![CDATA[
                        using (var stream = await file.OpenStreamForWriteAsync())
                        {
                            await $streamParam.CopyToAsync(stream);
                        }                    
                      ]]>
                    </map:AddPreStatementFromTemplate>
                    <map:RemoveCurrentStatement/>
                  </map:ActionSequence>
                </map:Case.Action>
              </map:Case>
              <map:Case>
                <map:Case.Condition>
                  <map:WithMethodCall>
                    <map:ArgumentCount>2</map:ArgumentCount>
                    <map:WithArgument Position="0">
                      <map:IsExpressionOfType>System.String</map:IsExpressionOfType>
                      <map:AssignName>$name</map:AssignName>
                    </map:WithArgument>
                    <map:WithArgument Position="1">
                      <!--<map:IsExpressionOfType>System.Byte[]</map:IsExpressionOfType>-->
                      <map:AssignName>$bytes</map:AssignName>
                    </map:WithArgument>
                    <map:WithCalledMemberOwner>
                      <map:AssignName>$owner</map:AssignName>
                    </map:WithCalledMemberOwner>
                  </map:WithMethodCall>
                </map:Case.Condition>
                <map:Case.Action>
                  <map:ActionSequence>
                    <map:AddPreStatementFromTemplate>
                      <![CDATA[  
                      var file = await $owner.CreateFileAsync($name, Windows.Storage.CreationCollisionOption.GenerateUniqueName); 
                      ]]>
                    </map:AddPreStatementFromTemplate>
                    <map:AddPreStatementFromTemplate>
                      <![CDATA[
                        using (var stream = await file.OpenStreamForWriteAsync())
                        {
                            stream.Write($bytes, 0, $bytes.Length);
                        }                    
                      ]]>
                    </map:AddPreStatementFromTemplate>     
                    <map:RemoveCurrentStatement/>
                  </map:ActionSequence>
                </map:Case.Action>
              </map:Case>           
              <map:Default>
                <map:Keep/>
              </map:Default>
            </map:Conditional>
          </map:CodeMap.Action>
        </map:CodeMap>       
 
      </map:CodeMapPackage.Maps>
      <map:CodeMapPackage.Metadata>
        <map:PackageMetadata Key="ASYNC_MEMBERS" Value="SavePicture"/>
      </map:CodeMapPackage.Metadata>
    </map:CodeMapPackage>
  </MapUnit.Elements>
</MapUnit>
