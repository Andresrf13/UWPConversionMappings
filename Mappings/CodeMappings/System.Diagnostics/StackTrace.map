<MapUnit xmlns="clr-namespace:Mobilize.Mappers.Extensibility.Core;assembly=Mobilize.ExtensibleMappers" xmlns:map="clr-namespace:Mobilize.Mappers.Extensibility.Code;assembly=Mobilize.ExtensibleMappers">
  <MapUnit.Elements>
    <map:CodeMapPackage Type="System.Diagnostics.StackTrace">
      <map:CodeMapPackage.Maps>

        <map:CodeMap Kind="Call" MemberName="GetFrame">
          <map:Conditional>
            <map:Case>
              <map:Case.Condition>
                <map:WithMethodCall>
                  <map:ArgumentCount>1</map:ArgumentCount>
                  <map:WithArgument Position="0">
                    <map:AssignName>$index</map:AssignName>
                  </map:WithArgument>
                  <map:WithCalledMemberOwner>
                    <map:AssignName>$owner</map:AssignName>
                  </map:WithCalledMemberOwner>
                </map:WithMethodCall>              
            </map:Case.Condition>
              <map:Case.Action>
                <map:ReplaceWithTemplate>
                  $owner.GetFrames()[$index]
                </map:ReplaceWithTemplate>
              </map:Case.Action>
            </map:Case>
            <map:Default>
              <map:Keep/>
            </map:Default>
          </map:Conditional>
        </map:CodeMap>

        <map:CodeMap Kind="MemberAccess" MemberName="FrameCount">
          <map:CodeMap.Action>
            <map:MarkAsNotMapped/>
          </map:CodeMap.Action>
        </map:CodeMap>

        <map:CodeMap Kind="New">
          <map:Conditional>          
            <!-- Case for two arguments and first parameter of type Exception, then Boolean -->
            <map:Case>
              <map:Case.Condition>
                <map:WithConstructorCall>
                  <map:ArgumentCount>2</map:ArgumentCount>
                  <map:WithArgument Position="0">
                    <map:IsExpressionOfType>System.Exception</map:IsExpressionOfType>
                  </map:WithArgument>
                  <map:WithArgument Position="1">
                    <map:IsExpressionOfType>System.Boolean</map:IsExpressionOfType>
                  </map:WithArgument>
                </map:WithConstructorCall>
              </map:Case.Condition>
              <map:Case.Action>
                <map:Keep/>
              </map:Case.Action>
            </map:Case>           
            <map:Default>
              <map:MarkAsNotMapped/>
            </map:Default>
          </map:Conditional>
        </map:CodeMap>        

      </map:CodeMapPackage.Maps>
    </map:CodeMapPackage>
  </MapUnit.Elements>
</MapUnit>
