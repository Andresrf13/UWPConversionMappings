<MapUnit xmlns="clr-namespace:Mobilize.Mappers.Extensibility.Core;assembly=Mobilize.ExtensibleMappers"
         xmlns:map="clr-namespace:Mobilize.Mappers.Extensibility.Code;assembly=Mobilize.ExtensibleMappers">
  <MapUnit.Elements>
    <map:CodeMapPackage Type="System.Windows.Media.Imaging.WriteableBitmap">
      <map:CodeMapPackage.Maps>

        <map:CodeMap Kind="Type">
          <map:CodeMap.Action>
            <map:ReplaceClassUsage NewNamespace="Windows.UI.Xaml.Media.Imaging"
                                   NewClassName="WriteableBitmap" />
          </map:CodeMap.Action>
        </map:CodeMap>

        <map:CodeMap Kind="New">
          <map:Conditional>
            <!-- Case for one argument of tipe BitmapSource -->
            <map:Case>
              <map:Case.Condition>
                <map:WithConstructorCall>
                  <map:ArgumentCount>1</map:ArgumentCount>
                  <map:WithArgument Position="0">                    
                    <map:AssignName>$source</map:AssignName>
                  </map:WithArgument>
                </map:WithConstructorCall>
              </map:Case.Condition>
              <map:Case.Action>
                <map:ReplaceWithTemplate>
                  new Windows.UI.Xaml.Media.Imaging.WriteableBitmap($source.PixelWidth, $source.PixelHeight)
                </map:ReplaceWithTemplate>
              </map:Case.Action>
            </map:Case>
            <!-- Case for two arguments, both params of type Int -->
            <map:Case>
              <map:Case.Condition>
                <map:WithConstructorCall>
                  <map:ArgumentCount>2</map:ArgumentCount>
                  <map:WithArgument Position="0">
                    <map:IsExpressionOfType>System.Int32</map:IsExpressionOfType>
                    <map:AssignName>$path</map:AssignName>
                  </map:WithArgument>
                  <map:WithArgument Position="1">
                    <map:IsExpressionOfType>System.Int32</map:IsExpressionOfType>
                    <map:AssignName>$detect</map:AssignName>
                  </map:WithArgument>
                </map:WithConstructorCall>
              </map:Case.Condition>
              <map:Case.Action>
                <map:Keep/>
              </map:Case.Action>
            </map:Case>
            <!-- Case for two arguments, first parameter of type UIElement and second parameter type Transform -->
            <map:Case>
              <map:Case.Condition>
                <map:WithConstructorCall>
                  <map:ArgumentCount>2</map:ArgumentCount>
                </map:WithConstructorCall>
              </map:Case.Condition>
              <map:Case.Action>
                <map:MarkAsNotMapped/>
              </map:Case.Action>
            </map:Case>
            <map:Default>
              <map:Keep/>
            </map:Default>
          </map:Conditional>
        </map:CodeMap>

        <map:CodeMap Kind="Call" MemberName="Invalidate">
          <map:CodeMap.Action>
            <map:Keep/>
          </map:CodeMap.Action>
        </map:CodeMap>

        <map:CodeMap Kind="Call" MemberName="Render">
          <map:CodeMap.Action>
            <map:ActionSequence>
              <map:Conditional>
                <map:Case>
                  <map:Case.Condition>
                    <map:WithMethodCall>
                      <map:WithCalledMemberOwner>
                        <map:AssignName>$obj</map:AssignName>
                      </map:WithCalledMemberOwner>
                      <map:WithArgument Position="0">
                        <map:AssignName>$control</map:AssignName>
                      </map:WithArgument>
                    <map:WithArgument Position="1">
                        <map:AssignName>$transform</map:AssignName>
                      </map:WithArgument>
                    </map:WithMethodCall>
                  </map:Case.Condition>
                  <map:Case.Action>
                    <map:ActionSequence>
                      <map:AddHelper Path="..\Helpers\WriteableBitmapHelperExtensions.cs"/>
                      <map:ReplaceWithTemplate>
                        <![CDATA[
                        await WindowsPhoneUWP.UpgradeHelpers.WriteableBitmapHelper.RenderHelper( $obj, $control, $transform)
                        ]]>
                      </map:ReplaceWithTemplate>
                    </map:ActionSequence>
                  </map:Case.Action>
                  </map:Case>
                <map:Default>
            <map:MarkAsNotMapped/>
                </map:Default>
              </map:Conditional>

            </map:ActionSequence>
          </map:CodeMap.Action>
        </map:CodeMap>

        <map:CodeMap Kind="MemberAccess" MemberName="Pixels">
          <map:Conditional>
            <map:Case>
              <map:Case.Condition>
                <map:WithLeftSideOfDottedAccess>
                   <map:AssignName>$owner</map:AssignName>
                </map:WithLeftSideOfDottedAccess>
              </map:Case.Condition>
              <map:Case.Action>
                <map:ReplaceWithTemplate>
                  new Int32[$owner.PixelWidth * $owner.PixelHeight]
                </map:ReplaceWithTemplate>
              </map:Case.Action>
            </map:Case>
            <map:Default>
              <map:Keep/>
            </map:Default>
          </map:Conditional>
        </map:CodeMap>


      </map:CodeMapPackage.Maps>

      <map:CodeMapPackage.Metadata>
        <map:PackageMetadata Key="ASYNC_MEMBERS" Value="Render"/>
      </map:CodeMapPackage.Metadata>
    </map:CodeMapPackage>
  </MapUnit.Elements>
</MapUnit>